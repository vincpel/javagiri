/* This file was generated by SableCC (http://www.sablecc.org/). */

package syntax.node;

import syntax.analysis.*;

@SuppressWarnings("nls")
public final class AAttributes extends PAttributes
{
    private TAttrKey _attrKey_;
    private TAttrValue _attrValue_;

    public AAttributes()
    {
        // Constructor
    }

    public AAttributes(
        @SuppressWarnings("hiding") TAttrKey _attrKey_,
        @SuppressWarnings("hiding") TAttrValue _attrValue_)
    {
        // Constructor
        setAttrKey(_attrKey_);

        setAttrValue(_attrValue_);

    }

    @Override
    public Object clone()
    {
        return new AAttributes(
            cloneNode(this._attrKey_),
            cloneNode(this._attrValue_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAttributes(this);
    }

    public TAttrKey getAttrKey()
    {
        return this._attrKey_;
    }

    public void setAttrKey(TAttrKey node)
    {
        if(this._attrKey_ != null)
        {
            this._attrKey_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._attrKey_ = node;
    }

    public TAttrValue getAttrValue()
    {
        return this._attrValue_;
    }

    public void setAttrValue(TAttrValue node)
    {
        if(this._attrValue_ != null)
        {
            this._attrValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._attrValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._attrKey_)
            + toString(this._attrValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._attrKey_ == child)
        {
            this._attrKey_ = null;
            return;
        }

        if(this._attrValue_ == child)
        {
            this._attrValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._attrKey_ == oldChild)
        {
            setAttrKey((TAttrKey) newChild);
            return;
        }

        if(this._attrValue_ == oldChild)
        {
            setAttrValue((TAttrValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
