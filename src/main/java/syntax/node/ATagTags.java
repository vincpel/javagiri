/* This file was generated by SableCC (http://www.sablecc.org/). */

package syntax.node;

import java.util.*;
import syntax.analysis.*;

@SuppressWarnings("nls")
public final class ATagTags extends PTags
{
    private POpenmarker _openmarker_;
    private final LinkedList<PTags> _tags_ = new LinkedList<PTags>();
    private PClosemarker _closemarker_;

    public ATagTags()
    {
        // Constructor
    }

    public ATagTags(
        @SuppressWarnings("hiding") POpenmarker _openmarker_,
        @SuppressWarnings("hiding") List<?> _tags_,
        @SuppressWarnings("hiding") PClosemarker _closemarker_)
    {
        // Constructor
        setOpenmarker(_openmarker_);

        setTags(_tags_);

        setClosemarker(_closemarker_);

    }

    @Override
    public Object clone()
    {
        return new ATagTags(
            cloneNode(this._openmarker_),
            cloneList(this._tags_),
            cloneNode(this._closemarker_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATagTags(this);
    }

    public POpenmarker getOpenmarker()
    {
        return this._openmarker_;
    }

    public void setOpenmarker(POpenmarker node)
    {
        if(this._openmarker_ != null)
        {
            this._openmarker_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openmarker_ = node;
    }

    public LinkedList<PTags> getTags()
    {
        return this._tags_;
    }

    public void setTags(List<?> list)
    {
        for(PTags e : this._tags_)
        {
            e.parent(null);
        }
        this._tags_.clear();

        for(Object obj_e : list)
        {
            PTags e = (PTags) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._tags_.add(e);
        }
    }

    public PClosemarker getClosemarker()
    {
        return this._closemarker_;
    }

    public void setClosemarker(PClosemarker node)
    {
        if(this._closemarker_ != null)
        {
            this._closemarker_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closemarker_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._openmarker_)
            + toString(this._tags_)
            + toString(this._closemarker_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._openmarker_ == child)
        {
            this._openmarker_ = null;
            return;
        }

        if(this._tags_.remove(child))
        {
            return;
        }

        if(this._closemarker_ == child)
        {
            this._closemarker_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._openmarker_ == oldChild)
        {
            setOpenmarker((POpenmarker) newChild);
            return;
        }

        for(ListIterator<PTags> i = this._tags_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTags) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._closemarker_ == oldChild)
        {
            setClosemarker((PClosemarker) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
