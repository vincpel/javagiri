/* This file was generated by SableCC (http://www.sablecc.org/). */

package syntax.node;

import java.util.*;
import syntax.analysis.*;

@SuppressWarnings("nls")
public final class AOpenmarker extends POpenmarker
{
    private TBiginTag _biginTag_;
    private TTagname _tagname_;
    private final LinkedList<PAttributes> _attributes_ = new LinkedList<PAttributes>();
    private TEndTag _endTag_;

    public AOpenmarker()
    {
        // Constructor
    }

    public AOpenmarker(
        @SuppressWarnings("hiding") TBiginTag _biginTag_,
        @SuppressWarnings("hiding") TTagname _tagname_,
        @SuppressWarnings("hiding") List<?> _attributes_,
        @SuppressWarnings("hiding") TEndTag _endTag_)
    {
        // Constructor
        setBiginTag(_biginTag_);

        setTagname(_tagname_);

        setAttributes(_attributes_);

        setEndTag(_endTag_);

    }

    @Override
    public Object clone()
    {
        return new AOpenmarker(
            cloneNode(this._biginTag_),
            cloneNode(this._tagname_),
            cloneList(this._attributes_),
            cloneNode(this._endTag_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOpenmarker(this);
    }

    public TBiginTag getBiginTag()
    {
        return this._biginTag_;
    }

    public void setBiginTag(TBiginTag node)
    {
        if(this._biginTag_ != null)
        {
            this._biginTag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._biginTag_ = node;
    }

    public TTagname getTagname()
    {
        return this._tagname_;
    }

    public void setTagname(TTagname node)
    {
        if(this._tagname_ != null)
        {
            this._tagname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tagname_ = node;
    }

    public LinkedList<PAttributes> getAttributes()
    {
        return this._attributes_;
    }

    public void setAttributes(List<?> list)
    {
        for(PAttributes e : this._attributes_)
        {
            e.parent(null);
        }
        this._attributes_.clear();

        for(Object obj_e : list)
        {
            PAttributes e = (PAttributes) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._attributes_.add(e);
        }
    }

    public TEndTag getEndTag()
    {
        return this._endTag_;
    }

    public void setEndTag(TEndTag node)
    {
        if(this._endTag_ != null)
        {
            this._endTag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endTag_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._biginTag_)
            + toString(this._tagname_)
            + toString(this._attributes_)
            + toString(this._endTag_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._biginTag_ == child)
        {
            this._biginTag_ = null;
            return;
        }

        if(this._tagname_ == child)
        {
            this._tagname_ = null;
            return;
        }

        if(this._attributes_.remove(child))
        {
            return;
        }

        if(this._endTag_ == child)
        {
            this._endTag_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._biginTag_ == oldChild)
        {
            setBiginTag((TBiginTag) newChild);
            return;
        }

        if(this._tagname_ == oldChild)
        {
            setTagname((TTagname) newChild);
            return;
        }

        for(ListIterator<PAttributes> i = this._attributes_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAttributes) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endTag_ == oldChild)
        {
            setEndTag((TEndTag) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
