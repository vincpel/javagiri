/* This file was generated by SableCC (http://www.sablecc.org/). */

package syntax.analysis;

import java.util.*;
import syntax.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPHtmldocument().apply(this);
        outStart(node);
    }

    public void inAHtmldocument(AHtmldocument node)
    {
        defaultIn(node);
    }

    public void outAHtmldocument(AHtmldocument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHtmldocument(AHtmldocument node)
    {
        inAHtmldocument(node);
        if(node.getTags() != null)
        {
            node.getTags().apply(this);
        }
        outAHtmldocument(node);
    }

    public void inASingletagTags(ASingletagTags node)
    {
        defaultIn(node);
    }

    public void outASingletagTags(ASingletagTags node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingletagTags(ASingletagTags node)
    {
        inASingletagTags(node);
        if(node.getEndSinngleTag() != null)
        {
            node.getEndSinngleTag().apply(this);
        }
        {
            List<PAttributes> copy = new ArrayList<PAttributes>(node.getAttributes());
            Collections.reverse(copy);
            for(PAttributes e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTagname() != null)
        {
            node.getTagname().apply(this);
        }
        if(node.getBiginTag() != null)
        {
            node.getBiginTag().apply(this);
        }
        outASingletagTags(node);
    }

    public void inATagTags(ATagTags node)
    {
        defaultIn(node);
    }

    public void outATagTags(ATagTags node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATagTags(ATagTags node)
    {
        inATagTags(node);
        if(node.getClosemarker() != null)
        {
            node.getClosemarker().apply(this);
        }
        {
            List<PTags> copy = new ArrayList<PTags>(node.getTags());
            Collections.reverse(copy);
            for(PTags e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOpenmarker() != null)
        {
            node.getOpenmarker().apply(this);
        }
        outATagTags(node);
    }

    public void inATextTags(ATextTags node)
    {
        defaultIn(node);
    }

    public void outATextTags(ATextTags node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextTags(ATextTags node)
    {
        inATextTags(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextTags(node);
    }

    public void inAOpenmarker(AOpenmarker node)
    {
        defaultIn(node);
    }

    public void outAOpenmarker(AOpenmarker node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenmarker(AOpenmarker node)
    {
        inAOpenmarker(node);
        if(node.getEndTag() != null)
        {
            node.getEndTag().apply(this);
        }
        {
            List<PAttributes> copy = new ArrayList<PAttributes>(node.getAttributes());
            Collections.reverse(copy);
            for(PAttributes e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTagname() != null)
        {
            node.getTagname().apply(this);
        }
        if(node.getBiginTag() != null)
        {
            node.getBiginTag().apply(this);
        }
        outAOpenmarker(node);
    }

    public void inAClosemarker(AClosemarker node)
    {
        defaultIn(node);
    }

    public void outAClosemarker(AClosemarker node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosemarker(AClosemarker node)
    {
        inAClosemarker(node);
        if(node.getEndClosetag() != null)
        {
            node.getEndClosetag().apply(this);
        }
        if(node.getClosetagname() != null)
        {
            node.getClosetagname().apply(this);
        }
        if(node.getBiginClosetag() != null)
        {
            node.getBiginClosetag().apply(this);
        }
        outAClosemarker(node);
    }

    public void inAAttributes(AAttributes node)
    {
        defaultIn(node);
    }

    public void outAAttributes(AAttributes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributes(AAttributes node)
    {
        inAAttributes(node);
        if(node.getAttrValue() != null)
        {
            node.getAttrValue().apply(this);
        }
        if(node.getAttrKey() != null)
        {
            node.getAttrKey().apply(this);
        }
        outAAttributes(node);
    }

    public void inAInnertext(AInnertext node)
    {
        defaultIn(node);
    }

    public void outAInnertext(AInnertext node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnertext(AInnertext node)
    {
        inAInnertext(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outAInnertext(node);
    }
}
